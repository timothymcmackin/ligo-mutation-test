#import "./pokeGame.jsligo" "PokeGame"

#import "./unit_pokeGame.jsligo" "PokeGameTest"

import Test = Test.Next;

type param = parameter_of PokeGame.PokeGameContract;
type storage = PokeGame.storage;

// Run unit tests with the deployed mutated contract
const run_test_with_mutation = (
    taddr: typed_address<param, storage>,
    _c: michelson_contract<param, storage>,
    _: int
): unit => {
  // Set up account
  const account1 = PokeGameTest.setUpAccount();
  // Run test with account and deployed mutated version of contract
  PokeGameTest.unitTest(account1, taddr);
}

const test_mutation = ((): unit => {
  // Run the tests with mutated versions of the contract
  const mutationErrorList = Test.Mutation.contract(
    contract_of(PokeGame.PokeGameContract),
    PokeGameTest.initial_storage,
    0tez,
    run_test_with_mutation
  );

  // Check if any mutated versions passed all tests
  match(mutationErrorList) {
    when (None()): Test.IO.log("Mutation tests passed");
    when (Some(passingMutations)):
      do {
        Test.IO.log("Some mutated versions passed tests:");
        Test.IO.log(passingMutations[1]);
        failwith(Test.String.show(passingMutations[1]));
      };
  }
})();
